# -*- coding: utf-8 -*-
"""Bagaimana Faktor Eksternal Memengaruhi Risiko Perbankan Indonesia.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oLv1u5WqNFu4LYRoTUPwfnVu3pYPP_ED

# Mengimport Data
"""

import pandas as pd

data = pd.read_excel("C:/Users/ACER/Downloads/data bankkk.xlsx")
data_chny = pd.read_csv("C:/Users/ACER/Downloads/Data Historis CNY_IDR (1).csv")

data.head()

data.info()

data_chny.head()

data_chny.info()

"""# Membersihkan Data"""

data_chny['Tanggal'] = pd.to_datetime(data_chny['Tanggal'])

def convert_to_float(x):
    return float(x.replace('.', '').replace(',', '.'))

data_chny['Terakhir'] = data_chny['Terakhir'].apply(convert_to_float)
data_chny['Pembukaan'] = data_chny['Pembukaan'].apply(convert_to_float)
data_chny['Tertinggi'] = data_chny['Tertinggi'].apply(convert_to_float)
data_chny['Terendah'] = data_chny['Terendah'].apply(convert_to_float)

data_chny.info()

data_chny['Mean Kurs'] = data_chny[['Terakhir', 'Pembukaan', 'Tertinggi', 'Terendah']].mean(axis=1)
data_chny.head()

# Truncate kolom 'Tanggal' ke awal bulan
data_chny['Tanggal'] = data_chny['Tanggal'].dt.to_period('M').dt.to_timestamp()

data_kurs_china = data_chny.groupby("Tanggal")["Mean Kurs"].mean().reset_index()
data_kurs_china

df = pd.merge(data, data_kurs_china[['Tanggal', 'Mean Kurs']], on='Tanggal', how='inner').drop("Kurs (Yuan)", axis=1).rename(columns={
    'Mean Kurs':'Kurs (Yuan)'
})

df.head()

rentang_waktu = df['Tanggal'] < '2020-12-01'

df.loc[rentang_waktu, "Kopi Robusta"] = df.loc[rentang_waktu, "Kopi Robusta"]*100
df.head()

"""# Mengevaluasi Data"""

df.info()

df.isnull().sum()

df.duplicated().sum()

"""# Exploratory Data Analysis (EDA)"""

import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

col = df.drop("Tanggal", axis=1).columns.tolist()
col

"""## Cek Distribusi Data dan Outliers"""

def visualize_by(column):
    fig, axs = plt.subplots(1,2, figsize=(12,5))
    sns.histplot(df, x=column, ax=axs[0])
    axs[0].set_title(f'Distribusi Data {column}')

    sns.boxplot(df, y=column, ax=axs[1])
    axs[1].set_title(f'Distribusi Data {column}')

    fig.tight_layout()
    plt.show()

visualize_by("Kurs (USD)")

visualize_by("Kurs (Yuan)")

visualize_by("ULN")

visualize_by("Minyak")

visualize_by("Batubara")

visualize_by("CPO")

visualize_by("Kopi Robusta")

visualize_by("Karet")

visualize_by("NPL")

visualize_by("LDR")

"""## Analisis Data Time Series"""

def monthly_data(column):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))

    sns.lineplot(data=df, x='Tanggal', y=column, ax=axs[0])
    axs[0].set_title(f'Perkembangan Data {column}')
    axs[0].set_xlabel("Tanggal")
    axs[0].set_ylabel(column)

    sns.lineplot(data=df, x='Tanggal', y=column, ax=axs[1])
    axs[1].set_title(f'Perkembangan Data {column} Ketika Covid')
    axs[1].set_xlabel("Tanggal")
    axs[1].set_ylabel(column)
    axs[1].axvline(pd.to_datetime('2020-03-01'), color='red', linestyle='--', label='Covid-19')
    axs[1].legend()  # Tambahkan legenda untuk garis vertikal

    fig.tight_layout()
    plt.show()

monthly_data("Kurs (USD)")

monthly_data("Kurs (Yuan)")

monthly_data("Minyak")

monthly_data("Batubara")

monthly_data("CPO")

monthly_data("Kopi Robusta")

monthly_data("Karet")

monthly_data("NPL")

monthly_data("LDR")

"""## Analisis Korelasi Antar Variabel"""

urutan = ['Kurs (USD)', 'Kurs (Yuan)', 'ULN', 'Minyak', 'Batubara', 'CPO', 'Kopi Robusta', 'Karet', 'NPL', 'LDR']
plt.figure(figsize=(12,5))
sns.heatmap(data = df[urutan].corr(), annot=True, cmap='Reds')
plt.title("Heatmap Korelasi")
plt.show()

kolom = ['Kurs (USD)', 'Kurs (Yuan)', 'ULN', 'Minyak', 'Batubara', 'CPO', 'Kopi Robusta', 'Karet']
def corr(df, columns):
    fig, axs = plt.subplots(4, 2, figsize=(18, 15))

    for i, column in enumerate(columns):
        row = i // 2
        col = i % 2
        sns.regplot(data=df, x=column, y='NPL', ax=axs[row, col], ci=None, line_kws={"color": "red"})
        axs[row, col].set_title(f'Korelasi {column} Dengan NPL', fontsize=15)

    plt.tight_layout()
    plt.show()

corr(df, kolom)

kolom = ['Kurs (USD)', 'Kurs (Yuan)', 'ULN', 'Minyak', 'Batubara', 'CPO', 'Kopi Robusta', 'Karet']
def corr(df, columns):
    fig, axs = plt.subplots(4, 2, figsize=(18, 15))

    for i, column in enumerate(columns):
        row = i // 2
        col = i % 2
        sns.regplot(data=df, x=column, y='LDR', ax=axs[row, col], ci=None, line_kws={"color": "red"})
        axs[row, col].set_title(f'Korelasi {column} Dengan LDR', fontsize=15)

    plt.tight_layout()
    plt.show()

corr(df, kolom)

"""## Analisis Dummy Covid-19"""

import numpy as np
df['Covid'] = np.where(df['Tanggal'] >= '2020-03-01', 'Yes', 'No')

df.head()

def visualize_by(ax, column):
    data = df.groupby('Covid')[column].mean().reset_index()
    sns.barplot(data=data, x='Covid', y=column, ax=ax)
    ax.set_title(f'Rata-Rata {column} Ketika Covid dan Tidak')

fig, axs = plt.subplots(4,2, figsize=(15,18))
for i, col in enumerate(kolom):
    row = i // 2
    col_pos = i % 2
    visualize_by(axs[row, col_pos], col)

fig.tight_layout()
plt.show()

"""# Data Preprocessing"""

df.info()

df['Covid'] = df['Covid'].map({'Yes':1, 'No':0})

"""## Split Data Menjadi Features dan Target"""

X = df.drop(['LDR', 'NPL', 'Tanggal'], axis=1)
y_npl = df['NPL']
y_ldr = df['LDR']

X

"""# Model Machine Learning"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error
from sklearn.model_selection import GridSearchCV, TimeSeriesSplit, cross_val_score, train_test_split

"""## Machine Learning untuk Target NPL"""

X_train, X_test, y_train, y_test = train_test_split(X, y_npl, test_size=0.3, random_state=42)

dtree = DecisionTreeRegressor().fit(X_train, y_train)
y_pred = dtree.predict(X_test)

print("R2 Score = ", r2_score(y_test, y_pred))
print("Mean Absolute Error = ", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error = ", mean_squared_error(y_test, y_pred))

param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(estimator=DecisionTreeRegressor(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X_train, y_train)

print("Parameter terbaik:", grid_search.best_params_)
print("Mean Squared Error terbaik dari GridSearchCV:", -grid_search.best_score_)

dtree = DecisionTreeRegressor(max_depth=None, min_samples_split=10).fit(X_train, y_train)

y_pred = dtree.predict(X_test)

print("R2 Score = ", r2_score(y_test, y_pred))
print("Mean Absolute Error = ", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error = ", mean_squared_error(y_test, y_pred))

fi = pd.DataFrame()
fi['Fitur'] = X.columns
fi['Skor Fitur'] = dtree.feature_importances_
fi = fi.sort_values(by='Skor Fitur', ascending=False)

ax = sns.barplot(fi, y='Fitur', x='Skor Fitur')
for index, value in enumerate(fi['Skor Fitur']):
    ax.text(value, index, f'{value:.2f}', color='black', ha="left")
plt.title("Feature Importance")
plt.show()

"""## Machine Learning untuk Target LDR"""

X_train, X_test, y_train, y_test = train_test_split(X, y_ldr, test_size=0.3, random_state=42)

dtree = DecisionTreeRegressor().fit(X_train, y_train)
y_pred = dtree.predict(X_test)

print("R2 Score = ", r2_score(y_test, y_pred))
print("Mean Absolute Error = ", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error = ", mean_squared_error(y_test, y_pred))

param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(estimator=DecisionTreeRegressor(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           scoring='neg_mean_squared_error')

grid_search.fit(X_train, y_train)

print("Parameter terbaik:", grid_search.best_params_)
print("Mean Squared Error terbaik dari GridSearchCV:", -grid_search.best_score_)

dtree = DecisionTreeRegressor(max_depth=None, min_samples_split=5).fit(X_train, y_train)

y_pred = dtree.predict(X_test)

print("R2 Score = ", r2_score(y_test, y_pred))
print("Mean Absolute Error = ", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error = ", mean_squared_error(y_test, y_pred))

fi = pd.DataFrame()
fi['Fitur'] = X.columns
fi['Skor Fitur'] = dtree.feature_importances_
fi = fi.sort_values(by='Skor Fitur', ascending=False)

ax = sns.barplot(fi, y='Fitur', x='Skor Fitur')
for index, value in enumerate(fi['Skor Fitur']):
    ax.text(value, index, f'{value:.2f}', color='black', ha="left")
plt.title("Feature Importance")
plt.show()

